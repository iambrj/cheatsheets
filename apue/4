Various filetypes are
	1. Regular files
	2. Directory
	3. Character special (devices - variable size blocks)
	4. Block special (devices - fixed size blocks)
	5. Symbolic links
	6. Sockets
	7. FIFO (IPC)

struct stat 
{
	mode_t	st_mode; /*file type and permissions*/
	ino_t	st_ino; /*i node number*/
	dev_t 	st_dev; /*device number*/
	dev_t	st_rdev; /*special device number*/
	nlink_t	st_nlink; /*number of links*/
	uid_t	st_uid; /*owner user id*/
	gid_t	st_gid; /*group id*/
	off_t	st_size; /*file size*/
	struct timespec		st_atim; /*last access time*/
	struct timespec		st_mtime; /*last modified time*/
	struct timespe		cst_ctim; /*last file status change time*/
	blksize_t	st_blksize; /*best block io size*/
	blkcnt_t	 st_blocks; /*number of disk blocks allowed*/
}

#include <sys/stat.h>
S_ISREG()	// takes stat_object.st_mode as parameter
S_ISDIR()	// takes stat_object.st_mode as parameter
S_ISCHR()	// takes stat_object.st_mode as parameter
S_ISBLK()	// takes stat_object.st_mode as parameter
S_ISFIFO()	// takes stat_object.st_mode as parameter
S_ISSOCK()	// takes stat_object.st_mode as parameter
S_ISLINK()	// takes stat_object.st_mode as parameter
S_TYPEISMQ() // message queue// takes stat_object as parameter
S_TYPEISSE() // semaphore // takes stat_object as parameter
S_TYPEISSHM() // shard memory object // takes stat_object as parameter

st_mode // from <sys/stat.h>
	S_IRUSR
	S_IWUSR
	S_IXUSR
	S_IRGRP
	S_IWGRP
	S_IXGRP
	S_IROTH
	S_IWOTH
	S_IXOTH

Set set-user-ID and set-group-ID in st_mode if effective user id of process is to checked as owner

/*Check if file is accessable*/
#include <funistd.h>
int access(const char *pathname, int mode); //mode = F_OK/R_OK/W_OK/X_OK
int faccessat(int fd = AT_FDCWD, const char *pathname, int mode, int flag); //flag = AT_EACCESS => effective uid/gid checked
/*Returns 0 if access allowed, -1 otherwise*/
/* mode = F_OK/R_OK/W_OK/X_OK */

/*Modify default permissions*/
#include <sys/stat.h>
mode_t umask(mode_t cmask);

/*Modify file permissions*/
#include <sys/stat.h>
int chmod(const char *pathname, mode_t mode);
int fchmod(int fd = AT_FDCWD, mode_t mode);
int fchmodat(int fd = AT_FDCWD, const char *pathname, mode_t mode, int flag = AT_SYMLINK_NOFOLLOW);
mode = S_ISUID/S_ISGID/S_ISVTX/S_IRWXU/S_IRWXG/S_IRWXO

/*Modify file owner*/
#include <unistd.h>
int chown(const char *pathname, uid_t owner, gid_t group);
int fchwom(int fd = AT_FDCWD, uid_t owner, gid_t group);
itn fchownat(int fd = AT_FDCWD, const char *pathname, uid_t owner, gid_t group, int flag);
int lchown(const char *pathname, uid_t owner, gid_t group);
/*Return 0 if OK, -1 otherwise*/

/*Resize file*/
#include <unistd.h>
int truncate(const char *pathname, off_t length);
int ftruncate(int fd = AT_FDCWD, off_t length);
/*Return 0 if OK, -1 on error*/

/*Create link to existing file*/
#include <unistd.h>
int link(const char *existingpath, const char *newpath);
int linkat(int efd, const char *existingpath, int nfd, const char *newpath, int flag = AT_SYMLINK_FOLLOW);
/*Return 0 if OK, -1 otherwise*/

/*Remove existing directory entry*/
#include <unistd.h>
int unlink(const char *pathname);
int unlinkat(int fd = AT_FDCWD, const char *pathname, int flag = AT_REMOVEDIR);
/*Returns 0 if OK, -1 otherwise*/
/*Need write and execute permission in directory (if sticky bit also set, the one of three condition must be met) */
/*Kernel first checks number of process that have file open, then st_nlink*/

#include <stdio.h>
int remove(const char *pathname);
/*Returns 0 if OK, -1 otherwise*/

#include <stdio.h>
int rename(const char *oldname, const char *newname);
int renameat(int oldfd, const char *oldname, int newfd, const char *newname);
/*Returns 0 if OK, -1 otherwise*/
/*If oldname = newname, returns 1 without doing anything*/

#include <unistd.h>
int symlink(const char *actualpath, const char *sympath);
int symlinkat(const char *actualpath, int fd = AT_FDCWD, const char *sympath);
/*Return 0 if OK, -1 otherwise*/

#include <unistd.h>
int readlink(const char* restrict pathname, char *restrict buf, size_t bufsize);
int readlinkat(int fd, const char* restrict pathname, char *restrict buf, size_t bufsize);
/*Returns 0 if OK, -1 otherwise*/

#include <sys/stat.h>
int futimens(int fd, const struct timespec times[2]);
int utimensat(int fd, const char *path, const struct timespec times[2], int flag = AT_SYMLINK_FOLLOW);
/*Both return 0 if OK, -1 otherwise*/

#include <sys/time.h>
int utimes(const char *pathname, const struct timeval times[2]);
/*Returns 0 if OK, -1 otherwise*/

#include <sys/stat.h>
int mkdir(const char *pathname, mode_t mode);
int mkdirat(int fd, const char *pathname, mode_t mode);
/*Both return 0 if OK, -1 otherwise*/

#include <dirent.h>
DIR *opendir(const char *pathname);
DIR *fopendir(int fd);
/*Return pointer if OK, NULL otherwise*/
struct dirent *readdir(DIR *dp);
/*Returns pointer if OK, NULL otherwise*/
void rewinddir(DIR *dp);
int closedir(DIR *dp);
/*Returns 0 if OK, -1 otherwise*/
long telldir(DIR *dp);
/*Returns current location in directory associated with dp*/
void seekdir(DIR *dp, long loc);

dirent struct atleast contains
	ino_t d_ino; /*i node number*/
	char d_name[]; /*null-terminated filename*/

#include <unistd.h>
int chdir(const char* pathname);
int fchdir(int fd);
/*Both return 0 if OK, -1 otherwise*/

#include <unistd.h>
char *getcwd(char *buf, size_t size);
/*Returns buf if OK, -1 NULL on error*/

Use `major`/`minor` macros (e.g. major(stat_obj.st_dev)) to get major/minor number about filesystem
