Various filetypes are
	1. Regular files
	2. Directory
	3. Character special (devices - variable size blocks)
	4. Bloack special (devices - fixed size blocks)
	5. Symbolic links
	6. Sockets
	7. FIFO (IPC)

struct stat 
{
	mode_t	st_mode; /*file type and permissions*/
	ino_t	st_ino; /*i node number*/
	dev_t 	t_dev; /*device number*/
	dev_t	st_rdev; /*special device number*/
	nlink_t	st_nlink; /*number of links*/
	uid_t	st_uid; /*owner user id*/
	gid_t	st_gid; /*group id*/
	off_t	st_size; /*file size*/
	struct timespec		st_atim; /*last access time*/
	struct timespec		st_mtime; /*last modified time*/
	struct timespe		cst_ctim; /*last file status change time*/
	blksize_t	st_blksize; /*best block io size*/
	blkcnt_t	 st_blocks; /*number of disk blocks allowed*/
}

#include <sys/stat.h>
S_ISREG()	// takes stat_object.st_mode as parameter
S_ISDIR()	// takes stat_object.st_mode as parameter
S_ISCHR()	// takes stat_object.st_mode as parameter
S_ISBLK()	// takes stat_object.st_mode as parameter
S_ISFIFO()	// takes stat_object.st_mode as parameter
S_ISSOCK()	// takes stat_object.st_mode as parameter
S_ISLINK()	// takes stat_object.st_mode as parameter
S_TYPEISMQ() // message queue// takes stat_object as parameter
S_TYPEISSE() // semaphore // takes stat_object as parameter
S_TYPEISSHM() // shard memory object // takes stat_object as parameter

st_mode // from <sys/stat.h>
	S_IRUSR
	S_IWUSR
	S_IXUSR
	S_IRGRP
	S_IWGRP
	S_IXGRP
	S_IROTH
	S_IWOTH
	S_IXOTH

#include <funistd.h>
int access(const char *pathname, int mode); //mode = F_OK/R_OK/W_OK/X_OK
int faccessat(int fd, const char *pathname, int mode, int flag); //flag = AT-EACCESS => effective uid/gid checked
/*Returns 0 if access allowed, -1 otherwise*/

#include <sys/stat.h>
mode_t umask(mode_t cmask);

#include <sys/stat.h>
int chmod(const char *pathname, mode_t mode);
int fchmod(int fd, mode_t mode);
int fchmodat(int fd, const char *pathname, mode_t mode, int flag = AT_SYMLINK_NOFOLLOW);
mode = S_ISUID/S_ISGID/S_ISVTX/S_IRWXU/S_IRWXG/S_IRWXO

#include <unistd.h>
int chown(const char *pathname, uid_t owner, gid_t group);
int fchwom(int fd, uid_t owner, gid_t group);
itn fchownat(int fd, const char *pathname, uid_t owner, gid_t group, int flag);
int lchown(const char *pathname, uid_t owner, gid_t group);
/*Return 0 if OK, -1 otherwise*/


